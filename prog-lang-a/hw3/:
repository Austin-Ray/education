(* Coursera Programming Languages, Homework 3, Provided Code *)

exception NoAnswer

datatype pattern = Wildcard
		 | Variable of string
		 | UnitP
		 | ConstP of int
		 | TupleP of pattern list
		 | ConstructorP of string * pattern

datatype valu = Const of int
	      | Unit
	      | Tuple of valu list
	      | Constructor of string * valu

fun g f1 f2 p =
    let 
	val r = g f1 f2 
    in
	case p of
	    Wildcard          => f1 ()
	  | Variable x        => f2 x
	  | TupleP ps         => List.foldl (fn (p,i) => (r p) + i) 0 ps
	  | ConstructorP(_,p) => r p
	  | _                 => 0
    end

(**** for the challenge problem only ****)

datatype typ = Anything
	     | UnitT
	     | IntT
	     | TupleT of typ list
	     | Datatype of string

(**** you can put all your code here ****)

(* define pipeline for improved readability *)
infix |>
fun x |> f = f x 

(* 1. *)
val only_capitals = List.filter (fn x => (x, 0) |> String.sub |> Char.isUpper)

(* 2. *)
val longest_string1 = List.foldl (fn (x, y) => if String.size x > String.size y
																							 then x else y) ""

(* 3. *)
val longest_string2 = List.foldl (fn(x, y) => if String.size y > String.size x
																							then y else x) ""

(* 4. *)
fun longest_string_helper f xs = List.foldl(fn(x, y) => if f(x, y) then x else y)
	"" xs

val longest_string3 = longest_string_helper (fn (x, y) => String.size x > String.size y)

val longest_string4 = longest_string_helper (fn (x, y) => String.size x > String.size y
																													orelse String.size x = String.size y)

(* 5. *)
val longest_capitalized = longest_string1 o only_capitals

(* 6. *)
val rev_string = String.implode o List.rev o String.explode

(* 7. *)
fun first_answer f xs =
	case xs of 
			[] => raise NoAnswer
		| x::xs => case f x of
									NONE => first_answer f xs
								| SOME v => v

(* 8. *)
fun all_answers f xs = 
	let fun helper(f, xs, acc) =
		case xs of
			 [] => SOME []
		 | x::xs => case f x of
								 NONE => NONE
							 | SOME lst => helper(f, xs, lst @ acc) 
	in
		helper(f, xs, [])
	end

(* 9. a. *)
val count_wildcards = g (fn _ => 1) (fn _ => 0)

(* 9. b. *)
val count_wild_and_variable_lengths = g (fn _ => 1) (fn x => String.size x)

(* 9. c. *)
fun count_some_var(var, pat) = g (fn _ => 0) (fn x => if x = var then 1 else 0) pat

(* 10. *)
fun check_pat 
